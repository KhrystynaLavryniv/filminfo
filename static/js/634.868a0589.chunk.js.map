{"version":3,"file":"static/js/634.868a0589.chunk.js","mappings":"0MAEaA,EAAgBC,EAAAA,GAAAA,OAAH,wbAiBbC,EAAgBD,EAAAA,GAAAA,OAAH,+F,SCI1B,EAnBgB,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SACjB,OACE,0BACE,UAACH,EAAD,CAAeI,KAAK,SAASC,GAAG,SAASF,SAAUA,EAAnD,WACE,SAACD,EAAD,CAAeI,MAAM,GAArB,6EAEA,SAACJ,EAAD,CAAeI,MAAM,iBAArB,sCACA,SAACJ,EAAD,CAAeI,MAAM,kBAArB,sCACA,SAACJ,EAAD,CAAeI,MAAM,mBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,oBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,mBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,oBAArB,8C,yKCbKC,E,QAAwBN,GAAAA,IAAH,uG,6BC2FlC,EAjFe,WACb,OAA4BO,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KACA,GAAoCP,EAAAA,EAAAA,UAAS,IAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAAsCT,EAAAA,EAAAA,UAAS,GAA/C,eAAOU,EAAP,KAAoBC,EAApB,KACA,GAAkCX,EAAAA,EAAAA,UAAS,GAA3C,eAAOY,EAAP,KAAkBC,EAAlB,KAEMC,EAAcV,EAAaW,IAAI,UAWrCC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBF,EACF,OAAOG,EAAAA,GAAAA,MAAY,6CAEhBH,IAGLP,GAAW,IACXW,EAAAA,EAAAA,IAAeJ,EAAaJ,GACzBS,MAAK,SAAAC,GACJ,MAEIA,EADFA,KAAQC,EADV,EACUA,QAASC,EADnB,EACmBA,YAGnB,GAAuB,IAAnBD,EAAQE,OACV,OAAON,EAAAA,GAAAA,MACL,yDAIJf,EAAUmB,GACVR,EAAaS,MAEdE,OAAM,SAAAC,GACL,OAAOR,EAAAA,GAAAA,MAAY,6CAEpBS,QAAQnB,GAAW,OACrB,CAACO,EAAaJ,KAEjBM,EAAAA,EAAAA,YAAU,YACRW,EAAAA,EAAAA,IAAcnB,EAAYE,GACvBS,MAAK,SAAAC,GACJ,MAEIA,EADFA,KAAQC,EADV,EACUA,QAASC,EADnB,EACmBA,YAEnBpB,EAAUmB,GACVR,EAAaS,MAEdE,OAAM,SAAAC,GACL,OAAOR,EAAAA,GAAAA,MAAY,+CAEtB,CAACT,EAAYE,IAGhB,OACE,UAAC,IAAD,YACE,UAACX,EAAD,YACE,SAAC6B,EAAA,EAAD,CAASjC,SAnDY,SAAAkC,GACzBpB,EAAcoB,EAAEC,OAAOhC,WAmDnB,SAACiC,EAAA,EAAD,CAAWC,SAzDI,SAAAC,GACnBA,EAAIC,iBACJ7B,EAAgB,CAAE8B,MAAOF,EAAIG,cAAcC,SAASF,MAAMrC,QAC1DmC,EAAIG,cAAcC,SAASF,MAAMrC,MAAQ,SAyDtCQ,IAAW,SAACgC,EAAA,EAAD,IAEXrC,IAAU,SAACsC,EAAA,EAAD,CAActC,OAAQA,KACjC,SAACuC,EAAA,EAAD,CACE5B,UAAWA,EACX6B,SAdW,SAAAC,GAAG,OAAI/B,EAAe+B,IAejChC,YAAaA","sources":["components/SortBar/SortBar.styled.jsx","components/SortBar/SortBar.jsx","pages/TVPage/TVPage.styled.jsx","pages/TVPage/TVPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SortBarSelect = styled.select`\n  cursor: pointer;\n  border: none;\n  background-color: #212c39;\n  padding: 10px 15px;\n\n  color: aliceblue;\n  border-bottom: 1px solid rgba(196, 232, 241, 1);\n  :focus {\n    border-radius: 5px;\n\n    outline: none;\n    -webkit-box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n    -moz-box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n    box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n  }\n`;\nexport const SortBarOption = styled.option`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SortBarOption, SortBarSelect } from './SortBar.styled';\n\nconst SortBar = ({ onChange }) => {\n  return (\n    <div>\n      <SortBarSelect name=\"movies\" id=\"movies\" onChange={onChange}>\n        <SortBarOption value=\"\">-ðŸ •ðŸ — sort by... ðŸ —ðŸ •-</SortBarOption>\n\n        <SortBarOption value=\"popularity.asc\">popularity ðŸ •</SortBarOption>\n        <SortBarOption value=\"popularity.desc\">popularity ðŸ —</SortBarOption>\n        <SortBarOption value=\"vote_average.asc\">vote average ðŸ •</SortBarOption>\n        <SortBarOption value=\"vote_average.desc\">vote average ðŸ —</SortBarOption>\n        <SortBarOption value=\"release_date.asc\">release date ðŸ •</SortBarOption>\n        <SortBarOption value=\"release_date.desc\">release date ðŸ —</SortBarOption>\n      </SortBarSelect>\n    </div>\n  );\n};\nSortBar.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\nexport default SortBar;\n","import styled from 'styled-components';\n\nexport const SearchOptionContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchTVByQuery, fetchTVBySort } from '../../services/api';\nimport { SearchBar } from '../../components/SearchBar/SearchBar';\nimport Loader from '../../components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport MoviesGalery from '../../components/MoviesGalery/MoviesGalery';\nimport SortBar from '../../components/SortBar/SortBar';\nimport { SearchOptionContainer } from './TVPage.styled';\nimport { PageContainer } from 'pages/MoviesPage/MoviesPage.styled';\nimport PaginationList from 'components/Pagination/Pagination';\n\nconst TVPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [sortOption, setSortOption] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n\n  const searchQuery = searchParams.get('query');\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: evt.currentTarget.elements.query.value });\n    evt.currentTarget.elements.query.value = '';\n  };\n  const handleChangeSelect = e => {\n    setSortOption(e.target.value);\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return toast.error(\"Sorry, but you didn't enter a movie title\");\n    }\n    if (!searchQuery) {\n      return;\n    }\n    setLoading(true);\n    fetchTVByQuery(searchQuery, currentPage)\n      .then(data => {\n        const {\n          data: { results, total_pages },\n        } = data;\n\n        if (results.length === 0) {\n          return toast.error(\n            'Sorry, there are no movies with that title, try again'\n          );\n        }\n\n        setMovies(results);\n        setTotalPage(total_pages);\n      })\n      .catch(error => {\n        return toast.error('Sorry, something went wrong, try again');\n      })\n      .finally(setLoading(false));\n  }, [searchQuery, currentPage]);\n\n  useEffect(() => {\n    fetchTVBySort(sortOption, currentPage)\n      .then(data => {\n        const {\n          data: { results, total_pages },\n        } = data;\n        setMovies(results);\n        setTotalPage(total_pages);\n      })\n      .catch(error => {\n        return toast.error('Sorry, something went wrong, try again');\n      });\n  }, [sortOption, currentPage]);\n  const paginate = num => setCurrentPage(num);\n\n  return (\n    <PageContainer>\n      <SearchOptionContainer>\n        <SortBar onChange={handleChangeSelect} />\n        <SearchBar onSubmit={handleSubmit} />\n      </SearchOptionContainer>\n\n      {loading && <Loader />}\n\n      {movies && <MoviesGalery movies={movies} />}\n      <PaginationList\n        totalPage={totalPage}\n        paginate={paginate}\n        currentPage={currentPage}\n      />\n    </PageContainer>\n  );\n};\nexport default TVPage;\n"],"names":["SortBarSelect","styled","SortBarOption","onChange","name","id","value","SearchOptionContainer","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","loading","setLoading","sortOption","setSortOption","currentPage","setCurrentPage","totalPage","setTotalPage","searchQuery","get","useEffect","toast","fetchTVByQuery","then","data","results","total_pages","length","catch","error","finally","fetchTVBySort","SortBar","e","target","SearchBar","onSubmit","evt","preventDefault","query","currentTarget","elements","Loader","MoviesGalery","Pagination","paginate","num"],"sourceRoot":""}