{"version":3,"file":"static/js/736.eec45a3e.chunk.js","mappings":"8QAEaA,EAAWC,EAAAA,GAAAA,GAAH,8IAORC,EAAWD,EAAAA,GAAAA,GAAH,+HAMRE,EAAUF,EAAAA,GAAAA,IAAH,kGAMPG,EAAWH,EAAAA,GAAAA,IAAH,sF,kBC8CrB,MA3DA,WACE,OAAgCI,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IAEXE,EAAAA,EAAAA,IAAkBL,GACfM,MAAK,SAAAC,GACJ,IACUC,EACND,EADFA,KAAQC,KAKV,GAFAT,EAAYS,GAEQ,IAAhBA,EAAKC,OACP,OAAOC,EAAAA,GAAAA,MACL,kEAILC,OAAM,SAAAC,GACL,OAAOF,EAAAA,GAAAA,MACL,kEAGHG,QAAQV,GAAW,MACrB,CAACH,KAGF,gCACGE,IAAW,SAACY,EAAA,EAAD,KACZ,SAAClB,EAAD,UACGE,IACC,SAACN,EAAD,UACGM,EAASiB,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAA7B,OACZ,UAACzB,EAAD,YACE,SAACC,EAAD,CACEyB,IACED,EACI,kCAAoCA,EACpCE,EAENC,IAAKL,KAGP,4BACE,uBAAIA,IACHC,GAAY,6BAAKA,EAAL,QAAuB,kCAZzBF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\nexport const CastItem = styled.li`\n  width: calc(100% / 7 - 10px);\n  margin-bottom: 30px;\n  text-align: center;\n  border-radius: 5px;\n`;\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  height: 75%;\n  border-radius: 5px;\n`;\nexport const CastCont = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from '../../services/api';\nimport Loader from '../Loader/Loader';\nimport toast from 'react-hot-toast';\nimport { CastImg, CastList, CastCont, CastItem } from './Cast.styled';\nimport imageNotFound from '../../images/nf.jpg';\n\nfunction Cast() {\n  const [castInfo, setCastInfo] = useState([]);\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    fetchMovieCredits(movieId)\n      .then(data => {\n        const {\n          data: { cast },\n        } = data;\n\n        setCastInfo(cast);\n\n        if (cast.length === 0) {\n          return toast.error(\n            \"We don't have any information about the cast for this movie\"\n          );\n        }\n      })\n      .catch(error => {\n        return toast.error(\n          \"We don't have any information about the cast for this movie\"\n        );\n      })\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      <CastCont>\n        {castInfo && (\n          <CastList>\n            {castInfo.map(({ cast_id, name, character, profile_path }) => (\n              <CastItem key={cast_id}>\n                <CastImg\n                  src={\n                    profile_path\n                      ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                      : imageNotFound\n                  }\n                  alt={name}\n                />\n\n                <div>\n                  <p>{name}</p>\n                  {character ? <p>({character})</p> : <p>?</p>}\n                </div>\n              </CastItem>\n            ))}\n          </CastList>\n        )}\n      </CastCont>\n    </>\n  );\n}\nexport default Cast;\n"],"names":["CastList","styled","CastItem","CastImg","CastCont","useState","castInfo","setCastInfo","movieId","useParams","loading","setLoading","useEffect","fetchMovieCredits","then","data","cast","length","toast","catch","error","finally","Loader","map","cast_id","name","character","profile_path","src","imageNotFound","alt"],"sourceRoot":""}