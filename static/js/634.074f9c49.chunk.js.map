{"version":3,"file":"static/js/634.074f9c49.chunk.js","mappings":"0MAEaA,EAAgBC,EAAAA,GAAAA,OAAH,wbAiBbC,EAAgBD,EAAAA,GAAAA,OAAH,+F,SCI1B,EAnBgB,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SACjB,OACE,0BACE,UAACH,EAAD,CAAeI,KAAK,SAASC,GAAG,SAASF,SAAUA,EAAnD,WACE,SAACD,EAAD,CAAeI,MAAM,GAArB,6EAEA,SAACJ,EAAD,CAAeI,MAAM,iBAArB,sCACA,SAACJ,EAAD,CAAeI,MAAM,kBAArB,sCACA,SAACJ,EAAD,CAAeI,MAAM,mBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,oBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,mBAArB,wCACA,SAACJ,EAAD,CAAeI,MAAM,oBAArB,8C,yKCbKC,E,QAAwBN,GAAAA,IAAH,uG,0DC+ElC,EAnEe,WAAO,IAAD,IACbO,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KACA,GAAoCP,EAAAA,EAAAA,WAClC,UAAAF,EAASU,cAAT,eAAiBC,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,IAAIF,MAAM,KAAK,KAAM,IADpE,eAAOG,EAAP,KAAmBC,EAAnB,KAGA,GAAsCb,EAAAA,EAAAA,UACpCc,SAAQ,UAAChB,EAASU,cAAV,aAAC,EAAiBC,MAAM,KAAKC,MAAM,GAAGC,KAAK,IAAIF,MAAM,KAAK,KAAO,GAD3E,eAAOM,EAAP,KAAoBC,EAApB,KAGA,GAAkChB,EAAAA,EAAAA,UAAS,GAA3C,eAAOiB,EAAP,KAAkBC,EAAlB,KACAd,EAAae,IAAI,SAQjBC,EAAAA,EAAAA,YAAU,WACRb,GAAW,IACXc,EAAAA,EAAAA,IAAcT,EAAYG,GACvBO,MAAK,SAAAC,GACJ,MAEIA,EADFA,KAAQC,EADV,EACUA,QAASC,EADnB,EACmBA,YAEnBvB,EAAcsB,GACdN,EAAaO,MAEdC,OAAM,SAAAC,GACL,OAAOC,EAAAA,GAAAA,MAAY,6CAEpBC,QAAQtB,GAAW,MACrB,CAACK,EAAYG,IAGhB,OACE,UAAC,IAAD,YACE,UAAClB,EAAD,YACE,SAACiC,EAAA,EAAD,CAASrC,SA1BY,SAAAsC,GACzB1B,EAAgB,CAAE2B,KAAMD,EAAEE,OAAOrC,QACjCiB,EAAckB,EAAEE,OAAOrC,OACvBoB,EAAe,OAyBX,SAAC,KAAD,WACE,SAAC,KAAD,CAAMkB,GAAE,qBAAwBC,MAAO,CAAEC,KAAMtC,GAA/C,UACE,SAAC,cAAD,CAAsBF,MAAO,CAAEyC,MAAO,YAAaC,KAAM,OAAzD,UACE,0BACE,SAAC,MAAD,eAOThC,IAAW,SAACiC,EAAA,EAAD,IAEXtC,IACC,SAACuC,EAAA,EAAD,CAAcC,SAAU,cAAeC,OAAQzC,KAEjD,SAAC0C,EAAA,EAAD,CACE1B,UAAWA,EACX2B,SAzBW,SAAAC,GAAG,OAAI7B,EAAe6B,IA0BjC9B,YAAaA,EACbX,aAAY,gBAAWQ","sources":["components/SortBar/SortBar.styled.jsx","components/SortBar/SortBar.jsx","pages/TVPage/TVPage.styled.jsx","pages/TVPage/TVPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SortBarSelect = styled.select`\n  cursor: pointer;\n  border: none;\n  background-color: #212c39;\n  padding: 10px 15px;\n\n  color: aliceblue;\n  border-bottom: 1px solid rgba(196, 232, 241, 1);\n  :focus {\n    border-radius: 5px;\n\n    outline: none;\n    -webkit-box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n    -moz-box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n    box-shadow: 3px 1px 14px 0px rgba(196, 232, 241, 1);\n  }\n`;\nexport const SortBarOption = styled.option`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SortBarOption, SortBarSelect } from './SortBar.styled';\n\nconst SortBar = ({ onChange }) => {\n  return (\n    <div>\n      <SortBarSelect name=\"movies\" id=\"movies\" onChange={onChange}>\n        <SortBarOption value=\"\">-ðŸ •ðŸ — sort by... ðŸ —ðŸ •-</SortBarOption>\n\n        <SortBarOption value=\"popularity.asc\">popularity ðŸ •</SortBarOption>\n        <SortBarOption value=\"popularity.desc\">popularity ðŸ —</SortBarOption>\n        <SortBarOption value=\"vote_average.asc\">vote average ðŸ •</SortBarOption>\n        <SortBarOption value=\"vote_average.desc\">vote average ðŸ —</SortBarOption>\n        <SortBarOption value=\"release_date.asc\">release date ðŸ •</SortBarOption>\n        <SortBarOption value=\"release_date.desc\">release date ðŸ —</SortBarOption>\n      </SortBarSelect>\n    </div>\n  );\n};\nSortBar.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\nexport default SortBar;\n","import styled from 'styled-components';\n\nexport const SearchOptionContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { fetchTVBySort } from '../../services/api';\nimport Loader from '../../components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport MoviesGalery from '../../components/MoviesGalery/MoviesGalery';\nimport SortBar from '../../components/SortBar/SortBar';\nimport { SearchOptionContainer } from './TVPage.styled';\nimport { PageContainer } from 'pages/MoviesPage/MoviesPage.styled';\nimport PaginationList from 'components/Pagination/Pagination';\nimport { ImSearch } from 'react-icons/im';\nimport { IconContext } from 'react-icons';\nimport { SearchBtn } from 'components/SearchBar/SearchBar.styled';\n\nconst TVPage = () => {\n  const location = useLocation();\n  const [tvepisodes, setTvepisodes] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [sortOption, setSortOption] = useState(\n    location.search?.split('?').slice(1, 2).join('').split('=')[1] || ''\n  );\n  const [currentPage, setCurrentPage] = useState(\n    parseInt(location.search?.split('?').slice(2).join('').split('=')[1]) || 1\n  );\n  const [totalPage, setTotalPage] = useState(1);\n  searchParams.get('sort');\n\n  const handleChangeSelect = e => {\n    setSearchParams({ sort: e.target.value });\n    setSortOption(e.target.value);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchTVBySort(sortOption, currentPage)\n      .then(data => {\n        const {\n          data: { results, total_pages },\n        } = data;\n        setTvepisodes(results);\n        setTotalPage(total_pages);\n      })\n      .catch(error => {\n        return toast.error('Sorry, something went wrong, try again');\n      })\n      .finally(setLoading(false));\n  }, [sortOption, currentPage]);\n  const paginate = num => setCurrentPage(num);\n\n  return (\n    <PageContainer>\n      <SearchOptionContainer>\n        <SortBar onChange={handleChangeSelect} />\n\n        <SearchBtn>\n          <Link to={`/tvepisodes/search`} state={{ from: location }}>\n            <IconContext.Provider value={{ color: 'aliceblue', size: '2em' }}>\n              <div>\n                <ImSearch />\n              </div>\n            </IconContext.Provider>\n          </Link>\n        </SearchBtn>\n      </SearchOptionContainer>\n\n      {loading && <Loader />}\n\n      {tvepisodes && (\n        <MoviesGalery pathName={'/tvepisodes'} movies={tvepisodes} />\n      )}\n      <PaginationList\n        totalPage={totalPage}\n        paginate={paginate}\n        currentPage={currentPage}\n        searchParams={`?sort=${sortOption}`}\n      />\n    </PageContainer>\n  );\n};\nexport default TVPage;\n"],"names":["SortBarSelect","styled","SortBarOption","onChange","name","id","value","SearchOptionContainer","location","useLocation","useState","tvepisodes","setTvepisodes","useSearchParams","searchParams","setSearchParams","loading","setLoading","search","split","slice","join","sortOption","setSortOption","parseInt","currentPage","setCurrentPage","totalPage","setTotalPage","get","useEffect","fetchTVBySort","then","data","results","total_pages","catch","error","toast","finally","SortBar","e","sort","target","to","state","from","color","size","Loader","MoviesGalery","pathName","movies","Pagination","paginate","num"],"sourceRoot":""}